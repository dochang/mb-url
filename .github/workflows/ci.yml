name: CI
on:
  - push
  - pull_request
env:
  GUIX_PACK_CACHE: /opt/guix-pack.tar.gz
  GUIX_PACK_ROOT: /opt/guix
jobs:
  Mega-Linter:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # Mega-Linter
      - name: Mega-Linter
        id: ml
        # You can override Mega-Linter flavor used to have faster performances
        # More info at https://megalinter.github.io/flavors/
        uses: megalinter/megalinter@v5
        env:
          # All available variables are described in documentation
          # https://megalinter.github.io/configuration/
          VALIDATE_ALL_CODEBASE: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload Mega-Linter artifacts
      - name: Archive production artifacts
        if: ${{ success() }} || ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: Mega-Linter reports
          path: |
            report
            mega-linter.log

  guix-pack:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Cache Guix pack
        id: guix_pack_cache
        uses: actions/cache@v2
        with:
          path: ${{ env.GUIX_PACK_CACHE }}
          key: guix-pack-cache-${{ hashFiles('manifest.scm') }}

      - name: Guix cache
        if: ${{ ! steps.guix_pack_cache.outputs.cache-hit }}
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/guix
          key: guix-cache-${{ hashFiles('**/manifest.scm') }}
          restore-keys: |
            guix-cache-

      - name: Install Guix
        if: ${{ ! steps.guix_pack_cache.outputs.cache-hit }}
        uses: PromyLOPh/guix-install-action@v1

      - name: Guix Pack
        if: ${{ ! steps.guix_pack_cache.outputs.cache-hit }}
        run: |
          guix pack --format=tarball --relocatable --relocatable --symlink=/bin=bin --root=/tmp/guix-pack.tar.gz --manifest=manifest.scm
          cp /tmp/guix-pack.tar.gz "${{ env.GUIX_PACK_CACHE }}"
          # /tmp/guix-pack.tar.gz is a symlink which points to Guix store.  Copy it.

  test:
    needs:
      - guix-pack
    runs-on: ubuntu-latest
    services:
      httpbin:
        image: kennethreitz/httpbin
        ports:
          - "80"
    strategy:
      fail-fast: false
      matrix:
        emacs-version:
          - 25.1
          - 25.2
          - 25.3
          - 26.1
          - 26.2
          - 26.3
          - 27.1
          - 27.2
          - 28.1
    steps:
      - uses: actions/checkout@v2

      - name: Cache Guix pack
        id: guix_pack_cache
        uses: actions/cache@v2
        with:
          path: ${{ env.GUIX_PACK_CACHE }}
          key: guix-pack-cache-${{ hashFiles('manifest.scm') }}

      - name: Unpack Guix Pack
        run: |
          mkdir -p "${{ env.GUIX_PACK_ROOT }}"
          tar x -z -f "${{ env.GUIX_PACK_CACHE }}" -C "${{ env.GUIX_PACK_ROOT }}" -v

      - name: Set up Emacs
        uses: purcell/setup-emacs@master
        with:
          version: ${{ matrix.emacs-version }}

      - name: Install Eldev
        run: curl -fsSL https://raw.github.com/doublep/eldev/master/webinstall/github-eldev | sh

      - name: Test
        run: |
          sleep 15s
          # Waiting for httpbin
          PATH="${GUIX_PACK_ROOT}/bin:$PATH"
          eldev lint
          eldev test
        env:
          MB_URL_TEST__HTTPBIN_PREFIX: "http://localhost:${{ job.services.httpbin.ports['80'] }}"
        timeout-minutes: 5
